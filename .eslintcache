[{"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\index.js":"1","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\reportWebVitals.js":"2","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\App.js":"3","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Pin\\Pin.js":"4","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\model\\model.js":"5","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Round\\Round.js":"6","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Hint\\Hint.js":"7","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\End\\End.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":1794,"mtime":1612531604964,"results":"12","hashOfConfig":"10"},{"size":422,"mtime":1612449143194,"results":"13","hashOfConfig":"10"},{"size":2469,"mtime":1612479962604,"results":"14","hashOfConfig":"10"},{"size":420,"mtime":1612184064995,"results":"15","hashOfConfig":"10"},{"size":365,"mtime":1612464823463,"results":"16","hashOfConfig":"10"},{"size":741,"mtime":1612532709987,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jbbw61",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\index.js",[],["37","38"],"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\reportWebVitals.js",[],"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\App.js",["39","40","41","42"],"import './App.css';\nimport Pin from './Pin/Pin'\nimport Hint from './Hint/Hint'\nimport End from './End/End'\nimport Round from './Round/Round'\nimport { useState } from 'react';\nimport { initialModel, createModel } from './model/model';\nimport { round } from 'lodash';\n\nfunction App() {\n  const [model, setModel] = useState(initialModel())\n  const { getAssumedColor, changeColor, check, reset } = createModel(model, setModel)\n  return (\n    <div className = \"container\">\n      <h1>MASTERMIND</h1>\n      <div className= \"UserColor\">\n        <Pin color={getAssumedColor(0)} change={() => changeColor(0)}></Pin>\n        <Pin color={getAssumedColor(1)} change={() => changeColor(1)}></Pin>\n        <Pin color={getAssumedColor(2)} change={() => changeColor(2)}></Pin>\n        <Pin color={getAssumedColor(3)} change={() => changeColor(3)}></Pin>\n        <button className=\"CheckButton\" onClick={check}>Check</button>\n      </div>\n      { model.rounds.map((round) => {\n        let userRound;\n        if (model.gamestate === \"PENDING\") {\n          return (<div className=\"rounds\">\n            <Pin color={round.assumedColors[0]} change={() => { }}></Pin>\n            <Pin color={round.assumedColors[1]} change={() => { }}></Pin>\n            <Pin color={round.assumedColors[2]} change={() => { }}></Pin>\n            <Pin color={round.assumedColors[3]} change={() => { }}></Pin>\n            <Hint color={round.result[0]}></Hint>\n            <Hint color={round.result[1]}></Hint>\n            <Hint color={round.result[2]}></Hint>\n            <Hint color={round.result[3]}></Hint>\n            <p className= \"RoundNumber\">{userRound = round.round + 2 }</p>\n          </div>)\n        } else {\n        }\n      })}\n      <End result={model.gamestate} reset= {reset}></End>\n    </div>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Pin\\Pin.js",[],"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\model\\model.js",["43","44","45","46","47","48","49","50"],"import { FITS, PARTIALLY, NOT_AT_ALL } from \"mastermind/src/hint\";\r\nimport * as game from 'mastermind/src/game'\r\nimport * as defaultLogic from 'mastermind/src/mastermind';\r\nimport { cloneDeep } from 'lodash';\r\nimport * as colors from 'mastermind/src/colors';\r\nimport { useState } from \"react\";\r\nconst { RED, BLUE, YELLOW, GREEN } = colors;\r\n\r\nlet currentRound = -1\r\n\r\nexport function initialModel(logic = defaultLogic) {\r\n    const randomFn = () => Math.random();\r\n    const randomCode = logic.generateCode(randomFn);\r\n    return {\r\n        //Spielercode\r\n        assumedColors: [RED, RED, RED, RED],\r\n        //Rundenanzahl\r\n        rounds: [],\r\n        //Vorgegebener Code\r\n        code: randomCode,\r\n        gamestate: []\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const checkRandom = () => {\r\n    return Math.floor(Math.random() * Math.floor(3));\r\n}\r\n\r\nexport function createModel(model, setModel, logic = defaultLogic) {\r\n    return {\r\n        getAssumedColor: (index) => model.assumedColors[index],\r\n        changeColor: (index) => {\r\n            const newModel = cloneDeep(model)\r\n            let colorList = Object.keys(colors)\r\n            colorList = colorList.slice(0, colorList.length)\r\n            const colorIndex = colorList.findIndex((c) => { return model.assumedColors[index] === c })\r\n            const newColorIndex = (colorIndex < colorList.length - 1) ? colorIndex + 1 : 0;\r\n            newModel.assumedColors[index] = colorList[newColorIndex];\r\n            setModel(newModel);\r\n        },\r\n        check: () => {\r\n            const newModel = cloneDeep(model)\r\n            newModel.rounds.push({\r\n                round: currentRound++,\r\n                assumedColors: model.assumedColors,\r\n                result: logic.checkCode(newModel.code, newModel.assumedColors, checkRandom),\r\n            })\r\n            newModel.gamestate = logic.checkGame(newModel.rounds[currentRound].result, currentRound)\r\n            setModel(newModel)\r\n        },\r\n        reset: () => {\r\n            const randomFn = () => Math.random();\r\n            const randomCode = logic.generateCode(randomFn);\r\n            const emptyModel = {\r\n                //Spielercode\r\n                assumedColors: [RED, RED, RED, RED],\r\n                //Rundenanzahl\r\n                rounds: [],\r\n                //Vorgegebener Code\r\n                code: randomCode,\r\n                gamestate: []\r\n            }\r\n            currentRound = -1;\r\n            setModel(emptyModel)\r\n        }\r\n    }\r\n}","C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Round\\Round.js",[],"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\Hint\\Hint.js",[],"C:\\Users\\ph-ko\\temp\\tasks\\mastermind-react\\src\\End\\End.js",["51","52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":8,"column":10,"nodeType":"60","messageId":"61","endLine":8,"endColumn":15},{"ruleId":"63","severity":1,"message":"64","line":23,"column":34,"nodeType":"65","messageId":"66","endLine":23,"endColumn":36},{"ruleId":"58","severity":1,"message":"67","line":35,"column":42,"nodeType":"60","messageId":"61","endLine":35,"endColumn":51},{"ruleId":"58","severity":1,"message":"68","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":14},{"ruleId":"58","severity":1,"message":"69","line":1,"column":16,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"70","line":1,"column":27,"nodeType":"60","messageId":"61","endLine":1,"endColumn":37},{"ruleId":"58","severity":1,"message":"71","line":2,"column":13,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"58","severity":1,"message":"72","line":6,"column":10,"nodeType":"60","messageId":"61","endLine":6,"endColumn":18},{"ruleId":"58","severity":1,"message":"73","line":7,"column":14,"nodeType":"60","messageId":"61","endLine":7,"endColumn":18},{"ruleId":"58","severity":1,"message":"74","line":7,"column":20,"nodeType":"60","messageId":"61","endLine":7,"endColumn":26},{"ruleId":"58","severity":1,"message":"75","line":7,"column":28,"nodeType":"60","messageId":"61","endLine":7,"endColumn":33},{"ruleId":"58","severity":1,"message":"76","line":1,"column":13,"nodeType":"60","messageId":"61","endLine":1,"endColumn":18},{"ruleId":"58","severity":1,"message":"71","line":2,"column":13,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"58","severity":1,"message":"71","line":8,"column":9,"nodeType":"60","messageId":"61","endLine":8,"endColumn":13},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Round' is defined but never used.","Identifier","unusedVar","'round' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'userRound' is assigned a value but never used.","'FITS' is defined but never used.","'PARTIALLY' is defined but never used.","'NOT_AT_ALL' is defined but never used.","'game' is defined but never used.","'useState' is defined but never used.","'BLUE' is assigned a value but never used.","'YELLOW' is assigned a value but never used.","'GREEN' is assigned a value but never used.","'hints' is defined but never used.","no-global-assign","no-unsafe-negation"]